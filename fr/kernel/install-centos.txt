.. _kernel-installation-centos:

CentOS
======

.. contents:: Table des matières
    :depth: 2
    :backlinks: top

.. note::
   Cette documentation a été créé grâce à Guillaume Sueur de Neogeo Technologies qui a pris le temps de tester
   l'installation du noyau ZOO-Kernel sur un environnement CentOS 5.5.

Requis
------

Installer quelques outils standard pour être capable de faire fonctionner le ZOO-Kernel sur votre plate-forme :

::

  yum install apache2
  yum install build-essentials
  yum install gcc-c++
  yum install zlib-devel
  yum install libxml2-devel
  yum install bison
  yum install openssl
  yum install python-devel
  yum install subversion

Compiler et installer la libriaire FastCGI depuis les sources

::

  wget http://www.fastcgi.com/dist/fcgi.tar.gz
  tar xzf fcgi-2.4.0.tar.gz
  ./configure
  make
  make install
  echo /usr/local/lib >> /etc/ld.so.conf.d/local.conf
  ldconfig

Compiler et installer les outils autoconf :

::

  wget http://ftp.gnu.org/gnu/autoconf/autoconf-latest.tar.gz
  tar xzf autoconf-latest.tar.gz
  ./configure --prefix=/usr
  make
  make install

Compiler et installer l'outil flex :

::

  wget http://downloads.sourceforge.net/project/flex/flex/flex-2.5.35/flex-2.5.35.tar.gz?r=http%3A%2F%2Fflex.sourceforge.net%2F&ts=1292529005&use_mirror=switch
  tar xzf flex-2.5.35.tar.gz
  cd flex-2.5.35
  ./configure --prefix=/usr
  make
  make install

Utiliser la version de curl fournie par la distribution CentOS va produire un ZOO-Kernel incapable de faire
fonctionner un Service. En effet, quelques erreurs de segmentation ont lieu quand on cherche à lancer des requêtes ``Execute``
sur le ZOO-Kernel. Compiler le ZOO-Kernel en définissant le drapeau ``USE_GDB`` dans les ``CFLAGS`` de votre ``Makefile``
vous permettra de lancer ZOO-Kernel depuis gdb et d'avoir plus d'informations sur ce qui ne fonctionne pas avec votre ZOO-Kernel.
En faisant cela, vous pourrez déterminer que le code sur la `ligne 173 <http://zoo-project.org/trac/browser/trunk/zoo-kernel/ulinet.c#L173>`__
et la `ligne 175 <http://zoo-project.org/trac/browser/trunk/zoo-kernel/ulinet.c#L175>`__ doit être commenté dans le fichier
``ulinet.c`` pour avoir un ZOO-Kernel qui fonctionne avec le curl disponible sur CentOS (curl version 7.15.5).
Si vous n'appliqué la modification, vous obtiendrez une erreur depuis une session gdb indiquant une erreur de
segmentation dans ``Curl_cookie_clearall``.

Vous pouvez de manière optionnelle compiler et installer curl depuis les sources :

::

  wget http://curl.haxx.se/download/curl-7.21.3.tar.bz2
  tar xjf curl-7.21.3.tar.bz2
  cd curl-7.21.3
  ./configure --prefix=/usr
  make
  make install

Compiler et installer Python :

::

  wget http://www.python.org/ftp/python/2.6.6/Python-2.6.6.tar.bz2
  tar xjf Python-2.6.6.tar.bz2
  cd Python-2.6.6
  ./configure
  make
  make install

Compiler puis installer votre propre bibliothèque GDAL :

::

  wget http://download.osgeo.org/gdal/gdal-1.7.3.tar.gz
  tar xzf gdal-1.7.3.tar.gz
  cd gdal-1.7.3
  ./configure  # add your options here
  make
  make install

Installer le SDK Sun JAVA dans ``/usr/share`` ensuite utilisez la ligne de commande suivante pour s'assurer que ``libjvm.so``
sera trouvé au lancement quel que soit le contexte.

::

  echo /usr/share/java-1.6.0-openjdk-1.6.0.0/jre/lib/i386/client/ >> /etc/ld.so.conf.d/jvm.conf
  ldconfig

Compiler le ZOO-Kernel et le ZOO-Services
-----------------------------------------

Compiler et installer le ZOO-Kernel et votre premier ZOO-Services.

Dans un  premier temps, compiler la librairie cgic fournie dans les sources SVN:

::

  svn co http://svn.zoo-project.org/svn/trunk zoo-project
  cd zoo-project/thirds/cgic206
  make

Compiler et installer le ZOO-Kernel.

::

  cd ../../zoo-kernel
  ./configure --with-java=/usr/share/jdk1.6.0_23/ --with-python
  make zoo_loader.cgi
  cp main.cfg /var/www/cgi-bin/
  cp  zoo_loader.cgi /var/www/cgi-bin/

Compiler et déployer votre premier ZOO-ServicesProviders (un simple HelloPy, ligne 1 et 2, et le premier OGR base-vect-ops
ServiceProvider, ligne 3 à 6):

::

  cp ../zoo-services/hello-py/cgi-env/*.zcfg /var/www/cgi-bin/
  cp ../zoo-services/hello-py/test_service.py /var/www/cgi-bin/
  cd ../ogr/base-vect-ops/
  make
  cp ./cgi-env/* /var/www/cgi-bin/
  vi /var/www/cgi-bin/main.cfg --> set your own informations here

Pour vous assurer que ``libjvm.so``sera trouvé par apache, merci de le redémarrrer :

::

  /etc/init.d/httpd restart

Tester votre noyau ZOO-Kernel
-----------------------------

Tester votre ZOO-Kernel depuis la ligne de commande:

::

  cd /var/www/cgi-bin
  ./zoo_loader.cgi "request=Execute&service=WPS&version=1.0.0&Identifier=HelloPy&DataInputs=a=Djay"
  ./zoo_loader.cgi "request=Execute&service=WPS&version=1.0.0&Identifier=Buffer&DataInputs=BufferDistance=1@datat

