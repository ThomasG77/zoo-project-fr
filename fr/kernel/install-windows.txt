.. _kernel-installation-windows:

Windows
=======

.. contents:: Table des matières
    :depth: 2
    :backlinks: top

Utiliser OSGeo4W
----------------

Installer OSGeo4W
*****************

Télécharger l'installateur OSGeo4W à partir de http://trac.osgeo.org/osgeo4w/, et installer le avec toutes les dépendances nécessaires aux
services (GDAL/OGR par exemple). Les bibliothèques suivantes sont requises: FastCGI, libxml, Python, cURL.

Installer d'autres outils et bibliothèques
******************************************

Après l'installation de OSGeo4W sur votre plate-forme vous aurez besoin de plus d'outils et de librairies GNU. `Ce paquet <http://www.zoo-project.org/dl/tool-win32.zip>`__
contient toutes les dépendances requises pour compiler sur WIN32 et celui-ci contient `les dépendances des exécutables à placer <http://www.zoo-project.org/dl/zoo-runtime.zip>`__
dans votre répertoire c:\OSGeo4W\bin.

Télécharger et installer le noyau de ZOO
****************************************

Télécharger la `version binaire <http://www.zoo-project.org/dl/zoo_loader.cgi>`__ du noyau de ZOO pour WIN32 puis le placer le
répertoire ``C:\OSGeo4W\bin``. N'oubliez pas de placer un fichier ``main.cfg`` dans le même répertoire, vous pouvez utiliser une copie modifiée
de `ce fichier <http://www.zoo-project.org/trac/browser/trunk/zoo-kernel/main.cfg>`__.

Déployer les fournisseurs de services de ZOO
********************************************

Vous pouvez utilisez la version binaire pour les fournisseurs de service OGR disponible depuis `ici <http://www.zoo-project.org/dl/zoo-services-win32.zip>`__.
Ensuite placez les deux bibliothèques avec leurs fichiers .zcfg respectifs dans votre répertoire local ``C:\OSGeo4W\bin``.

Tester
******

Maintenant vous devriez être capable d'interroger votre noyau de ZOO en local.

Compiler en utilisant vos propres librairies
--------------------------------------------

.. note::
   Vous devez être sure d'avoir effectuer les :ref:`étapes prérequises <kernel-installation-prereq>` avant de compiler le noyau de ZOO.

Les étapes suivantes sont à utiliser avec le compilateur Microsoft Visual Studio (et testé avec MSVC 2008).

1. S'assurer que les outils gnuwin32 ``bison.exe`` et ``flex.exe`` sont dans le PATH. Vous pouvez télécharger les outils GNUwin32 `ici <http://www.zoo-project.org/dl/tool-win32.zip>`__.

2. Modifier le fichier ``zoo-project\zoo-kernel\nmake.opt`` pour qu'il pointe vers vos librairies locales. Vous pouvez trouver un nmake.opt modifié qui pointe vers les librairies locales `ici <http://www.zoo-project.org/trac/attachment/ticket/27/nmake.opt>`__.
   Vous pouvez aussi trouver un fichier modifié ``zoo-project\zoo-kernel\makefile.vc`` `ici <http://www.zoo-project.org/trac/attachment/ticket/27/makefile.vc>`__.

3. Exécuter:

   ::

     nmake /f makefile.vc

4. Un fichier ``zoo_loader.cgi`` devrait être créé.  Notez que si un autre fichier nommé ``zoo_loader.cgi.manifest`` est aussi créé, vous
    devrez lancer une autre commande:

   ::

     nmake /f makefile.vc embed-manifest

5. Copier les fichiers ``zoo_loader.cgi`` et ``main.cfg`` ddan votre répertoire cgi-bin.

6. En utilisant l'invite de commande, tester le noyau de ZOO en lançant la commande suivante:

   ::

     D:\ms4w\Apache\cgi-bin> zoo_loader.cgi

   qui devrait renvoyer un message du type:

   ::

     Content-Type: text/xml; charset=utf-8
     Status: 200 OK

     <?xml version="1.0" encoding="utf-8"?>
     <ows:ExceptionReport xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xlink="http://www.w3.org/1999/xlink" xsi:schemaLocation="http://www.opengis.net/ows/1.1 http://schemas.opengis.net/ows/1.1.0/owsExceptionReport.xsd" xml:lang="en-US" version="1.1.0">
       <ows:Exception exceptionCode="MissingParameterValue">
         <ows:ExceptionText>Parameter &lt;request&gt; was not specified</ows:ExceptionText>
       </ows:Exception>
     </ows:ExceptionReport>

7. Editer le fichier ``cgi-bin/main.cfg`` pour qu'il contienne les valeurs décrivant votre service WPS. Un exemple de fichier
   fonctionnant sous windows est:

   ::

     [main]
     encoding = utf-8
     version = 1.0.0
     serverAddress = http://localhost/
     lang = en-CA
     tmpPath=/ms4w/tmp/ms_tmp/
     tmpUrl = /ms_tmp/

     [identification]
     title = The Zoo WPS Development Server
     abstract = Development version of ZooWPS. See http://www.zoo-project.org
     fees = None
     accessConstraints = none
     keywords = WPS,GIS,buffer

     [provider]
     providerName=Gateway Geomatics
     providerSite=http://www.gatewaygeomatics.com
     individualName=Jeff McKenna
     positionName=Director
     role=Dev
     adressDeliveryPoint=1101 Blue Rocks Road
     addressCity=Lunenburg
     addressAdministrativeArea=False
     addressPostalCode=B0J 2C0
     addressCountry=ca
     addressElectronicMailAddress=info@gatewaygeomatics.com
     phoneVoice=False
     phoneFacsimile=False

8. Ouvrir un fenêtre de navigateur web, et executer une requête GetCapababilites sur votre service WPS: http://localhost/cgi-bin/zoo_loader.cgi?request=GetCapabilities&service=WPS

   La réponse renvoyée dans votre navigateur devrait être du type:

   ::

     <wps:Capabilities xsi:schemaLocation="http://www.opengis.net/wps/1.0.0 http://schemas.opengis.net/wps/1.0.0/wpsGetCapabilities_response.xsd" service="WPS" xml:lang="en-US" version="1.0.0">
     <ows:ServiceIdentification>
       <ows:Title>The Zoo WPS Development Server</ows:Title>
       <ows:Abstract>
         Development version of ZooWPS. See http://www.zoo-project.org
       </ows:Abstract>
       <ows:Keywords>
         <ows:Keyword>WPS</ows:Keyword>
         <ows:Keyword>GIS</ows:Keyword>
         <ows:Keyword>buffer</ows:Keyword>
       </ows:Keywords>
       <ows:ServiceType>WPS</ows:ServiceType>
       <ows:ServiceTypeVersion>1.0.0</ows:ServiceTypeVersion>
       ...

Optionally Compile Individual Services
**************************************

Un exemple pourrait être le fournisseur ``OGR base-vect-ops`` dans le répertoire ``zoo-project\zoo-services\ogr\base-vect-ops``.

1. Editer le makefile.vc situer dans ce répertoire, et exécuter:

   ::

     nmake /f makefile.vc

   Dans ce même répertoire, le fichier ``cgi-env\ogr_service.zo`` devrait être créé.

2. Copier tous les fichiers à l'intérieur de ``zoo-services\ogr\base-vect-ops\cgi-env`` dans votre répertoire cgi-bin

3. Tester le fournisseur de service grâce à l'URL suivante:

   http://localhost/cgi-bin/zoo_loader.cgi?request=Execute&service=WPS&version=1.0.0&Identifier=Buffer&DataInputs=BufferDistance=1@datatype=interger;InputPolygon=Reference@xlink:href=http%3A%2F%2Fwww.zoo-project.org%3A8082%2Fgeoserver%2Fows%3FSERVICE%3DWFS%26REQUEST%3DGetFeature%26VERSION%3D1.0.0%26typename%3Dtopp%3Astates%26SRS%3DEPSG%3A4326%26FeatureID%3Dstates.15

   La réponse renvoyée dans le navigateur devrait contenir:

   ::

     <wps:ProcessSucceeded>Service "Buffer" run successfully.</wps:ProcessSucceeded>

